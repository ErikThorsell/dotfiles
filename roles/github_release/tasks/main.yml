---
# Optional knobs (move to defaults/main.yml if you prefer):
# github_release_allow_fallback: true
# github_release_include_prereleases: false
# github_release_max_pages: 5
# github_release_per_page: 30
# github_token: "{{ lookup('env','GITHUB_TOKEN') | default(omit, true) }}"

- name: Ensure temp download directory exists
  ansible.builtin.file:
    path: "{{ github_release_dest }}"
    state: directory
    mode: '0755'

- name: Build common GitHub API headers
  ansible.builtin.set_fact:
    _gh_headers: >-
      {{
        dict(
          Accept='application/vnd.github.v3+json',
          **({'Authorization': 'Bearer ' + github_token} if github_token is defined else {})
        )
      }}

# --- Phase 1: latest release (backwards-compatible path) ---

- name: Fetch latest release metadata from GitHub
  ansible.builtin.uri:
    url: "https://api.github.com/repos/{{ github_release_repo }}/releases/latest"
    return_content: true
    headers: "{{ _gh_headers }}"
    status_code: [200]
    validate_certs: true
  register: github_release
  changed_when: false

- name: Collect matching asset URLs from latest
  ansible.builtin.set_fact:
    _latest_matching_assets: >-
      {{
        (github_release.json.assets | default([]))
        | selectattr('name','match', github_release_asset_pattern)
        | map(attribute='browser_download_url')
        | list
      }}

- name: Pick first matching asset from latest (if any)
  ansible.builtin.set_fact:
    github_release_asset_url: "{{ _latest_matching_assets[0] }}"
  when: _latest_matching_assets | length > 0

# --- Phase 2: fallback scan (only if nothing matched in latest) ---

- name: Decide whether to do a fallback search
  ansible.builtin.set_fact:
    _do_fallback: "{{ (github_release_asset_url is not defined or github_release_asset_url is none) and (github_release_allow_fallback | default(true)) }}"

- name: Fetch release pages (newest â†’ older)
  ansible.builtin.uri:
    url: "https://api.github.com/repos/{{ github_release_repo }}/releases?per_page={{ github_release_per_page | default(30) }}&page={{ item }}"
    headers: "{{ _gh_headers }}"
    return_content: true
    status_code: [200]
    validate_certs: true
  loop: "{{ range(1, (github_release_max_pages | default(5)) + 1) | list }}"
  register: _release_pages
  changed_when: false
  when: _do_fallback

- name: Flatten releases
  ansible.builtin.set_fact:
    _all_releases: "{{ (_release_pages.results | map(attribute='json') | flatten | list) if _release_pages is defined else [] }}"
  when: _do_fallback

- name: Remove drafts
  ansible.builtin.set_fact:
    _non_draft_releases: "{{ (_all_releases | rejectattr('draft', 'equalto', true) | list) if _all_releases is defined else [] }}"
  when: _do_fallback

- name: Optionally drop prereleases
  ansible.builtin.set_fact:
    _filtered_releases: >-
      {{
        (_non_draft_releases | selectattr('prerelease','equalto',false) | list)
        if not (github_release_include_prereleases | default(false))
        else (_non_draft_releases | list)
      }}
  when: _do_fallback

- name: Collect matching asset URLs across older releases
  ansible.builtin.set_fact:
    _fallback_matching_assets: >-
      {{
        (_filtered_releases | default([]))
        | map(attribute='assets') | flatten
        | selectattr('name','match', github_release_asset_pattern)
        | map(attribute='browser_download_url')
        | list
      }}
  when: _do_fallback

- name: Pick first matching asset across older releases (if any)
  ansible.builtin.set_fact:
    github_release_asset_url: "{{ _fallback_matching_assets[0] }}"
  when:
    - _do_fallback
    - _fallback_matching_assets | length > 0

# --- Phase 3: download or fail ---

- name: Assert that a matching asset was found
  ansible.builtin.fail:
    msg: >-
      No release asset matching pattern '{{ github_release_asset_pattern }}'
      found for {{ github_release_repo }} (latest plus {{ github_release_max_pages | default(5) }} page(s) of history).
      Consider adjusting github_release_asset_pattern or increasing github_release_max_pages.
  when: github_release_asset_url is not defined or github_release_asset_url is none

- name: Download GitHub release asset
  ansible.builtin.get_url:
    url: "{{ github_release_asset_url }}"
    dest: "{{ github_release_dest }}/{{ github_release_asset_url | basename }}"
    mode: '0644'
    headers: "{{ _gh_headers }}"
    force: "{{ (github_release_overwrite | default(false)) | bool }}"

