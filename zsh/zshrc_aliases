# TMH Aliases
alias tmh-monitors="xrandr --output DP-3-3 --primary --right-of eDP-1 --output DP-3-2 --right-of DP-3-3"
alias date180='date "+%Y-%m-%d" -d "+180 days"'

function sshci {
    readonly host=${1:?"Host must be specified"}
    ssh -i ~/.ssh/work/tmh/ciadmin-rsa ciadmin@"$host"
}

# Conveniance
alias aliases="vim ~/dotfiles/zsh/zshrc_aliases"

function note {

    # ${1-0} means "take argument 1 if present, else use value 0"
    d=$(date "+%Y-%m-%d" -d "${1-0} days")

    if [ ! -f "$HOME/Nextcloud/notes/$d.md" ]; then
        cp $HOME/Nextcloud/notes/template.md $HOME/Nextcloud/notes/$d.md
        sed -i "s/DATE/$d/" $HOME/Nextcloud/notes/$d.md
    fi
    vim $HOME/Nextcloud/notes/$d.md
}

#function note {
#    readonly topic=${@:?"Specify the topic for the note"}
#    d=$(date --iso-8601)
#    t=$(echo $topic | tr " " "-")
#    vim $HOME/work/tmh/notes/$d-$t.md
#}

# System
alias restart-sound="sudo kill -9 `ps ax | grep 'coreaudio[a-z]' | awk '{print $1}'` && echo Done"

#Kubernetes
alias k="kubectl"

function k_list {
    readonly namespace=${1:?"Namespace must be specified."}
    kubectl get -n "$namespace" pod,replicaset,deployment,service,ingress
}

function k_get_shell {
    readonly namespace=${1:?"Namespace must be specified."}
    readonly pod=${2:?"Namespace must be specified."}
    kubectl -n "$namespace" exec --stdin --tty "$pod" -- /bin/bash
}

function k_getsecrets {
    readonly namespace=${1:?"Namespace must be specified."}
    kubectl get secrets -n "$namespace"
}

function k_getsecret {
    readonly namespace=${1:?"Namespace must be specified."}
    readonly secret=${2:?"Name of secret must be specified."}
    kubectl get -n "$namespace" secret "$secret" -o json
}

function k_getsecret_appsettings_decode {
    readonly namespace=${1:?"Namespace must be specified."}
    readonly secret=${2:?"Name of secret must be specified."}
    kubectl get -n "$namespace" secret "$secret" -o json | jq -r '.data."appsettings.json"' | base64 -d
}

# Docker
alias d_kill="docker ps -q | xargs docker kill"
alias d_rcon_all="docker ps -aq | xargs docker rm"
alias d_rmi="docker images -aq | xargs docker rmi"

function d_rcon {
    readonly container=${1:?"Provide the container name or ID you wish to remove"}
    docker kill "$container"; docker rm "$container"
}

function d_rmi_p {
    readonly pattern=${1:?"Provide pattern to use for filtering"}
    docker images -a | grep "$pattern" | awk '{print $3}' | xargs docker rmi
}
